
$hex-height: 4vmax;

//$hex-height: 6.5vh; // Ã  conserver

:export {
  hexagon-height: 2.5vmax;
  character-bottom-margin: calc(#{$hex-height} / 10);
}

:root {
  /* Change this to change the appearance of the hexagons */
  --hex-height: #{$hex-height};
  --hex-width: calc(var(--hex-height) / 1.73);    /* 1.73 = sqrt(3) */
  --hex-between: calc(var(--hex-height) * 1.73);  /* 1.73 = sqrt(3) */
  --hex-margin: calc(var(--hex-height) / 2);
  --hex-border: calc(var(--hex-margin) / 1.73);   /* 1.73 = sqrt(3) */
  --hex-transition: all 2s ease;

  /* Colors */
  --color-hex-default: 	            #C4BAB8;
  --color-hex-vaccinated:           #3C83B7;
  --color-hex-vaccinated-shadow:    #2B72A6;
  --color-hex-infected:             #B0102C;
  --color-copy1:                    #FFFFFF;
  --color-copy2:                    #FFFFFF;
  --color-contour:                  #E9855B;
  --color-barrier:                  #2B72A6;
  --color-hex-vulnerable:           #FFFAB0;
  --color-vulnerable-contour:       #204c71;
}

body {
  opacity: 1;
  -webkit-transition: opacity 1s linear;
  -moz-transition: opacity 1s linear;
  -ms-transform: opacity 1s linear;
  -o-transition: opacity 1s linear;
  transition: opacity 1s linear;
}

.fade-out {
   opacity: 0;
   -webkit-transition: opacity 1s linear;
   -moz-transition: opacity 1s linear;
   -ms-transform: opacity 1s linear;
   -o-transition: opacity 1s linear;
   transition: opacity 1s linear;
}

.fade-in {
  opacity: 1;
  -webkit-transition: opacity 1s linear;
  -moz-transition: opacity 1s linear;
  -ms-transform: opacity 1s linear;
  -o-transition: opacity 1s linear;
  transition: opacity 1s linear;
}

/* Shapes colors */
 div.vulnerability,
 div.vulnerability::after,
 div.vulnerability::before {
   background-color: var(--color-hex-vulnerable);
   -webkit-transition: background-color 0.5s linear;
   -moz-transition: background-color 0.5s linear;
   -ms-transform: background-color 0.5s linear;
   -o-transition: background-color 0.5s linear;
   transition: background-color 0.5s linear;
 }



div.infected,
div.infected::after,
div.infected::before {
    background-color: var(--color-hex-infected);
    -webkit-transition: background-color 0.25s linear;
    -moz-transition: background-color 0.25s linear;
    -ms-transform: background-color 0.25s linear;
    -o-transition: background-color 0.25s linear;
    transition: background-color 0.25s linear;
}

div.vaccinated,
div.vaccinated::after,
div.vaccinated::before {
    background-color: var(--color-hex-vaccinated);
    -webkit-transition: background-color 0.25s linear;
    -moz-transition: background-color 0.25s linear;
    -ms-transform: background-color 0.25s linear;
    -o-transition: background-color 0.25s linear;
    transition: background-color 0.25s linear;
}

/* Hexagons */
.hexagon-container {
  display: grid;
  grid-template-columns: repeat(14, var(--hex-width)); // Repeat 14 times because grid contains 14 columns
  grid-auto-rows: calc(var(--hex-height) / 10);
  grid-gap: calc(var(--hex-between) / 3) calc(var(--hex-height) / 2);
  position: absolute;
  top: 0;
  left: 0;
}
.hexagon, svg#connections {
    // This so it doesn't get blurry when zoomed in (and out?)
    // Fix for Chrome (others?)
    -webkit-backface-visibility: hidden;
    -moz-backface-visibility:    hidden;
    -ms-backface-visibility:     hidden;
    backface-visibility:         hidden;
    -webkit-transform: translateZ(0) scale(1.0, 1.0);
    -moz-transform:    translateZ(0);
    -ms-transform:     translateZ(0);
    -o-transform:      translateZ(0);
    transform:         translateZ(0);
}
.hexagon {
  align-items: center;
  display: flex;
  height: var(--hex-height);
  justify-content: center;
  margin: var(--hex-border) 0;
  position: relative;
  width: var(--hex-width);
  z-index: 1;
}

.hexagon,
.hexagon::after,
.hexagon::before {
  background-color: var(--color-hex-default);
  height: var(--hex-height);
  width: var(--hex-width);
  -webkit-transition: background-color 0.5s linear;
  -moz-transition: background-color 0.5s linear;
  -ms-transform: background-color 0.5s linear;
  -o-transition: background-color 0.5s linear;
  transition: background-color 0.5s linear;
}
.hexagon::after,
.hexagon::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
}
.hexagon::before {
  transform: rotate(-60deg);
  -o-transform: rotate(-60deg);
  -moz-transform: rotate(-60deg);
  -webkit-transform: rotate(-60deg);
  -ms-transform: rotate(-60deg);
}
.hexagon::after {
  transform: rotate(60deg);
  -o-transform: rotate(60deg);
  -moz-transform: rotate(60deg);
  -webkit-transform: rotate(60deg);
  -ms-transform: rotate(60deg);
}
.no-hexagon,
.no-hexagon::after,
.no-hexagon::before {
  display: none;
}

.hexagon > svg {
  height: 85%;
}

div#copy1 {
  z-index: -2;
}
div#copy1 .hexagon {
  transform: scale(1.1, 1.1);
}
div#copy1 .hexagon,
div#copy1 .hexagon::after,
div#copy1 .hexagon::before {
  background-color: var(--color-copy1);
}

div#copy2 {
  z-index: -3;
}
div#copy2 .hexagon {
  transform: scale(1.4, 1.4);
}
div#copy2 .hexagon,
div#copy2 .hexagon::after,
div#copy2 .hexagon::before {
  background-color: var(--color-copy2);
}

div#copy2 .contour,
div#copy2 .contour::after,
div#copy2 .contour::before {
  background-color: var(--color-contour);
  z-index: 999;
  -webkit-transition: background-color 2s linear;
  -moz-transition: background-color 2s linear;
  -ms-transform: background-color 2s linear;
  -o-transition: background-color 2s linear;
  transition: background-color 2s linear;
}


div#copy1 .barrier,
div#copy1 .barrier::after,
div#copy1 .barrier::before,
div#copy2 .barrier,
div#copy2 .barrier::after,
div#copy2 .barrier::before {
  background-color: var(--color-barrier);
  z-index: 5;
  -webkit-transition: background-color 0s linear;
  -moz-transition: background-color 0s linear;
  -ms-transform: background-color 0s linear;
  -o-transition: background-color 0s linear;
  transition: background-color 0s linear;
}

div#copy1 .vulnerableContour,
div#copy1 .vulnerableContour::after,
div#copy1 .vulnerableContour::before,
div#copy2 .vulnerableContour,
div#copy2 .vulnerableContour::after,
div#copy2 .vulnerableContour::before {
  background-color: var(--color-vulnerable-contour);
  z-index: 999;
  -webkit-transition: background-color 2s linear;
  -moz-transition: background-color 2s linear;
  -ms-transform: background-color 2s linear;
  -o-transition: background-color 2s linear;
  transition: background-color 2s linear;
}

.transformer,
.transformer::after,
.transformer::before,
div#copy2 .transformer,
div#copy2 .transformer::after,
div#copy2 .transformer::before {
  background-color: var(--color-hex-vaccinated);
  -webkit-transition: background-color .5s linear;
  -moz-transition: background-color .5s linear;
  -ms-transform: background-color .5s linear;
  -o-transition: background-color .5s linear;
  transition: background-color .5s linear;
}
div#copy1 .transformer,
div#copy1 .transformer::after,
div#copy1 .transformer::before {
  background-color: var(--color-hex-vaccinated-shadow);
}

//
//.line {
//  -webkit-animation: dash 0.5s linear 0s forwards;
//  animation: dash 0.25s linear 0s forwards;
//
//}


//.lineBouncingOff {
//  -webkit-animation: dash 0.25s linear 0s 6 alternate;
//  animation: dash 0.25s linear 0s 6 alternate;
//}

@keyframes dash {
  to {
    stroke-dashoffset: 0;
  }
}

@media only screen  and (orientation: landscape){
  $hex-height: 6.5vh;
  :export {
    hexagon-height: calc(#{$hex-height} - ((#{$hex-height} / 10) * 2));
    character-bottom-margin: calc(#{$hex-height} / 10);
  }

  :root{
    --hex-height: #{$hex-height};
    --hex-width: calc(var(--hex-height) / 1.73);    /* 1.73 = sqrt(3) */
    --hex-between: calc(var(--hex-height) * 1.73);  /* 1.73 = sqrt(3) */
    --hex-margin: calc(var(--hex-height) / 2);
    --hex-border: calc(var(--hex-margin) / 1.73);   /* 1.73 = sqrt(3) */
    --hex-transition: all 2s ease;
  }

  .hexagon-container{
    vertical-align: middle;
    justify-content: center;
  }
}





@media only screen  and (orientation: portrait){
  $hex-height: 6.5vw;
  :export {
    hexagon-height: calc(#{$hex-height} - ((#{$hex-height} / 10) * 2));
    character-bottom-margin: calc(#{$hex-height} / 10);
  }

  :root{
    --hex-height: #{$hex-height};
    --hex-width: calc(var(--hex-height) / 1.73);    /* 1.73 = sqrt(3) */
    --hex-between: calc(var(--hex-height) * 1.73);  /* 1.73 = sqrt(3) */
    --hex-margin: calc(var(--hex-height) / 2);
    --hex-border: calc(var(--hex-margin) / 1.73);   /* 1.73 = sqrt(3) */
    --hex-transition: all 2s ease;
  }

  .hexagon-container{
    align-content: center;
    align-items: center;
    justify-content: center;
  }
}
